#Without using sklearn library
import pandas as pd
import numpy as np

df=pd.DataFrame(columns=['calory','breakfast','lunch','dinner','exercise','body_shape'])
df.loc[0]=[1200,1,0,0,2,'Skinny']
df.loc[1]=[2800,1,1,1,1,'Normal']
df.loc[2]=[3500,2,2,1,0,'Fat']
df.loc[3]=[1400,0,1,0,3,'Skinny']
df.loc[4]=[5000,2,2,2,0,'Fat']
df.loc[5]=[1300,0,0,1,2,'Skinny']
df.loc[6]=[3000,1,0,1,1,'Normal']
df.loc[7]=[4000,2,2,2,0,'Fat']
df.loc[8]=[2600,0,2,0,0,'Normal']

x=df[['calory','breakfast','lunch','dinner','exercise']]
y=df['body_shape']

from sklearn.preprocessing import StandardScaler
x_std=StandardScaler().fit_transform(x)

features=x_std.T
cov_matrix=np.cov(features)
#print(cov_matrix)

eig_vals=np.linalg.eig(cov_matrix)[0]
eig_vect=np.linalg.eig(cov_matrix)[1]

projected_x=np.dot(x_std,eig_vect[:,0:2])
print(projected_x)

# Using sklearn built-in library
from sklearn import decomposition
pca=decomposition.PCA(n_components=2)
sklearn_pca_x=pca.fit_transform(x_std)
print(sklearn_pca_x)
