###1.Imputation Using (Mean/Median) Values

#Description:
This works by calculating the mean/median of the non-missing values in a column and then replacing the missing values within each column
separately and independently from the others. It can only be used with numeric data.

#Pros:
Easy and fast.
Works well with small numerical datasets.
#Cons:
Doesn’t factor the correlations between features. It only works on the column level.
Will give poor results on encoded categorical features (do NOT use it on categorical features).
Not very accurate.
Doesn’t account for the uncertainty in the imputations.

#Code:
#Impute the values using scikit-learn SimpleImpute Class
from sklearn.impute import SimpleImputer
imp_mean = SimpleImputer( strategy='mean') #for median imputation replace 'mean' with 'median'
imp_mean.fit(train)
imputed_train_df = imp_mean.transform(train)


###2.Imputation Using (Most Frequent) or (Zero/Constant) Values

#Description:
Most Frequent is another statistical strategy to impute missing values and YES!! It works with categorical features 
(strings or numerical representations) by replacing missing data with the most frequent values within each column.

#Pros:
Works well with categorical features.
#Cons:
It also doesn’t factor the correlations between features.
It can introduce bias in the data.

#Code:
#Impute the values using scikit-learn SimpleImpute Class
from sklearn.impute import SimpleImputer
imp_mean = SimpleImputer( strategy='most_frequent')
imp_mean.fit(train)
imputed_train_df = imp_mean.transform(train)


###3.Imputation Using k-NN

#Description:
The k nearest neighbours is an algorithm that is used for simple classification. The algorithm uses ‘feature similarity’ 
to predict the values of any new data points. This means that the new point is assigned a value based on how closely 
it resembles the points in the training set. This can be very useful in making predictions about the missing values 
by finding the k’s closest neighbours to the observation with missing data and then imputing them based on the non-missing values 
in the neighbourhood. Let’s see some example code using Impyute library which provides a simple and easy way to use KNN for imputation

#Pros:
Can be much more accurate than the mean, median or most frequent imputation methods (It depends on the dataset).
#Cons:
Computationally expensive. KNN works by storing the whole training dataset in memory.
K-NN is quite sensitive to outliers in the data (unlike SVM)

#Code:
import sys
from impyute.imputation.cs import fast_knn
sys.setrecursionlimit(100000) #Increase the recursion limit of the OS
# start the KNN training
imputed_training=fast_knn(train.values, k=30)


###4.Imputation Using Multivariate Imputation by Chained Equation (MICE)

#Description:
This type of imputation works by filling the missing data multiple times. Multiple Imputations (MIs) 
are much better than a single imputation as it measures the uncertainty of the missing values in a better way. 
The chained equations approach is also very flexible and can handle different variables of different 
data types (ie., continuous or binary) as well as complexities such as bounds or survey skip patterns.

#Code:
from impyute.imputation.cs import mice
# start the MICE training
imputed_training=mice(train.values)

